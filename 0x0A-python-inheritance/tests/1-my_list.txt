The 1-my_list module
====================

Using ``print_sorted``
----------------------

Importing the class ``MyList`` from the module ``1-my_list``

	>>> MyList = __import__('1-my_list').MyList

Now Testing:

***********************************************

	Test_Case 1: test with normal list of integers

	>>> ls = MyList([15,3,4,6,5])
	>>> ls.print_sorted()
	[3,4,5,6,15]

***********************************************

	Test_Case 2: test with list of strings

	>>> ls = MyList(['15','3','6','4','5'])
	>>> ls.print_sorted()
	['3', '4','5','6','15']

***********************************************

	Test_Case 2: test with list of booleans

	>>> ls = MyList([True,False,True,False])
	>>> ls.print_sorted()
	[False, False, True, True]

***********************************************
Testing for module docstring:
    >>> m = __import__("1-my_list").__doc__
    >>> len(m) > 1
    True

Testing for class docstring:
    >>> a = __import__("1-my_list").MyList.__doc__
    >>> len(a) > 1
    True

Testing for method docstring:
	>>> mod = __import__("1-my_list").MyList.print_sorted.__doc__
	>>> len(mod) > 1
	True

Testing that MyList Inheritance:
	>>> issubclass(MyList, list)
	True

Testing for empty list:
	>>> l = MyList()
	>>> l.print_sorted()
	[]

Testing if appendng works:
	>>> l.append(4)
	>>> l.append(5)
	>>> l.append(6)
	>>> print(l)
	[4, 5, 6]

Testing for list already in correct order:
	>>> l.print_sorted()
	[4, 5, 6]

Testing for reversed order list:
	>>> l = MyList()
	>>> l.append(6)
	>>> l.append(5)
	>>> l.append(4)
	>>> print(l)
	[6, 5, 4]
	>>> l.print_sorted()
	[4, 5, 6]
	>>> print(l)
	[6, 5, 4]
